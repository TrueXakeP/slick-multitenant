import groovy.sql.Sql

repositories {
    mavenCentral()
}

configurations {
    driver
}

dependencies {
    driver 'com.h2database:h2:1.4.178'
}

URLClassLoader loader = GroovyObject.class.classLoader
configurations.driver.each { File file ->
    loader.addURL(file.toURL())
}

apply plugin: 'scala'
apply plugin: 'idea'

version = '0.0.1'

dependencies {
    compile 'org.scala-lang:scala-library:2.10.4'

    compile 'com.typesafe.slick:slick_2.10:2.0.2'

    compile 'com.typesafe:config:1.0.0'

    compile 'com.zaxxer:HikariCP:1.3.8'

    compile 'joda-time:joda-time:2.3'

    compile 'com.h2database:h2:1.4.178'

    testCompile 'org.specs2:specs2-core_2.10:2.3.12'
    testCompile 'org.specs2:specs2-junit_2.10:2.3.12'
}

task h2console(type: JavaExec, dependsOn: classes) {
    main = 'org.h2.tools.Server'
    classpath sourceSets.main.runtimeClasspath
}

file('src/main/resources/config.properties').withReader { reader ->
    def config = new Properties()
    config.load(reader)
    config.each { k, v ->
        project.ext.set(k, v)
    }
}

task createSchemas << {
    def driver = project.ext.get('db.driver')
    def url = project.ext.get('db.url')
    def user = project.ext.get('db.user')
    def publicSchema = file('db/public/product.sql').getText()
    def tenantSchema = file('db/tenant/payment.sql').getText()
    Sql sql = Sql.newInstance(url, user, '', driver)
    // create public schema
    sql.execute(publicSchema)
    // create tenant schemas
    ['a', 'b'].each { tenant ->
        sql.execute("drop schema " + tenant + " if exists")
        sql.execute("create schema " + tenant)
        sql.execute("set schema " + tenant)
        sql.execute(tenantSchema)
    }
    sql.close()
}

test.dependsOn createSchemas
